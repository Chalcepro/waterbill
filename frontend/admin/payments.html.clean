<!DOCTYPE html>
<html lang="en">
<!-- Head section remains the same as before -->
<!-- ... existing head content ... -->

<body>
    <!-- Admin Header -->
    <div id="adminHeader">
        <div class="header-container">
            <div class="header-left">
                <button id="menu-btn" class="hamburger">
                    <i class="fas fa-bars"></i>
                </button>
                <a href="dashboard.html" class="logo">
                    <span>WaterBill NG</span>
                </a>
            </div>
            <div class="header-right">
                <button id="logoutBtn" class="btn btn-outline-light btn-sm">
                    <i class="fas fa-sign-out-alt"></i> Logout
                </button>
            </div>
        </div>
    </div>

    <!-- Sidebar -->
    <div id="sidebar" class="sidebar">
        <div class="sidebar-header">
            <img src="../assets/images/logo-white.png" alt="Logo" class="sidebar-logo">
            <button class="close-btn" id="close-sidebar">&times;</button>
        </div>
        <div id="adminNav">
            <!-- Navigation will be loaded here -->
        </div>
    </div>
    <div class="overlay" id="overlay"></div>

    <!-- Main Content -->
    <main class="admin-content">
        <div class="container-fluid">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1>Payments</h1>
                <div>
                    <button id="exportButton" class="btn btn-primary">
                        <i class="fas fa-file-export"></i> Export
                    </button>
                </div>
            </div>

            <!-- Filters -->
            <div class="card mb-4">
                <div class="card-body">
                    <div class="row g-3">
                        <div class="col-md-3">
                            <label class="form-label">Status</label>
                            <select id="statusFilter" class="form-select">
                                <option value="">All Status</option>
                                <option value="pending">Pending</option>
                                <option value="completed">Completed</option>
                                <option value="failed">Failed</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Date Range</label>
                            <input type="date" class="form-control" id="dateFrom">
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">To</label>
                            <input type="date" class="form-control" id="dateTo">
                        </div>
                        <div class="col-md-3 d-flex align-items-end">
                            <button id="filterButton" class="btn btn-primary w-100">
                                <i class="fas fa-filter"></i> Apply Filters
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Payments Table -->
            <div class="card">
                <div class="card-body p-0">
                    <div class="table-responsive">
                        <table class="table table-hover mb-0">
                            <thead>
                                <tr>
                                    <th>User</th>
                                    <th>Amount</th>
                                    <th>Date</th>
                                    <th>Reference</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody id="payments-table">
                                <tr>
                                    <td colspan="6" class="text-center py-4">
                                        <div class="spinner-border text-primary" role="status">
                                            <span class="visually-hidden">Loading...</span>
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <!-- Export Modal -->
    <div class="modal fade" id="exportModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Export Payments</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Export Format</label>
                        <select id="exportFormat" class="form-select">
                            <option value="csv">CSV</option>
                            <option value="excel">Excel</option>
                            <option value="pdf">PDF</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Date Range</label>
                        <div class="input-group mb-2">
                            <span class="input-group-text">From</span>
                            <input type="date" id="exportDateFrom" class="form-control">
                        </div>
                        <div class="input-group">
                            <span class="input-group-text">To</span>
                            <input type="date" id="exportDateTo" class="form-control">
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" id="confirmExport" class="btn btn-primary">
                        <i class="fas fa-download me-1"></i> Export
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Payment Details Modal -->
    <div class="modal fade" id="paymentModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Payment Details</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body" id="paymentDetails">
                    <!-- Payment details will be loaded here -->
                    <div class="text-center py-4">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" id="approveBtn" class="btn btn-success d-none">
                        <i class="fas fa-check"></i> Approve
                    </button>
                    <button type="button" id="rejectBtn" class="btn btn-danger d-none">
                        <i class="fas fa-times"></i> Reject
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="../assets/js/notify.js"></script>
    <script src="../assets/js/auth-guard.js"></script>
    <script>
        // Global variables
        let currentPaymentId = null;
        let exportModal = null;
        let paymentModal = null;

        // Main initialization
        document.addEventListener('DOMContentLoaded', async function() {
            // Initialize modals
            exportModal = new bootstrap.Modal(document.getElementById('exportModal'));
            paymentModal = new bootstrap.Modal(document.getElementById('paymentModal'));

            // Check authentication
            if (window.AuthGuard) {
                const session = await AuthGuard.requireAdmin();
                if (!session) return;
            } else {
                await checkAuth();
            }

            // Load navigation
            await loadNavigation();
            
            // Setup event listeners
            setupEventListeners();
            
            // Load initial data
            await loadPayments();
        });

        // Navigation and authentication
        async function loadNavigation() {
            try {
                const navContainer = document.getElementById('adminNav');
                if (navContainer) {
                    const response = await fetch('../includes/admin-nav.html');
                    if (response.ok) {
                        navContainer.innerHTML = await response.text();
                        setupSidebar();
                    }
                }
            } catch (error) {
                console.error('Failed to load navigation:', error);
            }
        }

        function setupSidebar() {
            const menuBtn = document.getElementById('menu-btn');
            const sidebar = document.getElementById('sidebar');
            const overlay = document.getElementById('overlay');
            const closeBtn = document.getElementById('close-sidebar');
            
            if (!menuBtn || !sidebar || !overlay || !closeBtn) return;
            
            function toggleSidebar(show) {
                sidebar.classList.toggle('open', show);
                overlay.classList.toggle('show', show);
                document.body.style.overflow = show ? 'hidden' : '';
            }
            
            menuBtn.addEventListener('click', () => toggleSidebar(true));
            closeBtn.addEventListener('click', () => toggleSidebar(false));
            overlay.addEventListener('click', () => toggleSidebar(false));
        }

        async function checkAuth() {
            try {
                const response = await fetch('../../api/auth/check-session.php', { 
                    credentials: 'include' 
                });
                const result = await response.json();
                
                if (!result.authenticated || result.role !== 'admin') {
                    window.location.href = '../auth/login.html';
                }
            } catch (error) {
                console.error('Auth check failed:', error);
                window.location.href = '../auth/login.html';
            }
        }

        // Event Listeners
        function setupEventListeners() {
            // Logout
            const logoutBtn = document.getElementById('logoutBtn');
            if (logoutBtn) {
                logoutBtn.addEventListener('click', logout);
            }

            // Filter button
            const filterBtn = document.getElementById('filterButton');
            if (filterBtn) {
                filterBtn.addEventListener('click', filterPayments);
            }

            // Export button
            const exportBtn = document.getElementById('exportButton');
            if (exportBtn) {
                exportBtn.addEventListener('click', () => exportModal.show());
            }

            // Confirm export
            const confirmExportBtn = document.getElementById('confirmExport');
            if (confirmExportBtn) {
                confirmExportBtn.addEventListener('click', exportPayments);
            }

            // Payment action buttons
            document.addEventListener('click', function(e) {
                if (e.target.closest('.view-payment')) {
                    e.preventDefault();
                    const paymentId = e.target.closest('.view-payment').dataset.paymentId;
                    viewPayment(paymentId);
                } else if (e.target.closest('.approve-payment')) {
                    e.preventDefault();
                    const paymentId = e.target.closest('.approve-payment').dataset.paymentId;
                    updatePaymentStatus(paymentId, 'completed');
                } else if (e.target.closest('.reject-payment')) {
                    e.preventDefault();
                    const paymentId = e.target.closest('.reject-payment').dataset.paymentId;
                    updatePaymentStatus(paymentId, 'rejected');
                }
            });
        }

        // Data loading
        async function loadPayments() {
            const tbody = document.getElementById('payments-table');
            if (!tbody) return;

            try {
                // Show loading state
                tbody.innerHTML = `
                    <tr>
                        <td colspan="6" class="text-center py-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </td>
                    </tr>`;

                const response = await fetch('../../api/admin/payments-list.php', {
                    credentials: 'include'
                });
                
                if (!response.ok) throw new Error('Failed to load payments');
                
                const data = await response.json();
                
                if (data.success && data.payments) {
                    renderPayments(data.payments);
                } else {
                    throw new Error(data.message || 'Failed to load payments');
                }
            } catch (error) {
                console.error('Error loading payments:', error);
                tbody.innerHTML = `
                    <tr>
                        <td colspan="6" class="text-center text-danger py-4">
                            <i class="fas fa-exclamation-circle me-2"></i>
                            ${error.message || 'Failed to load payments'}
                        </td>
                    </tr>`;
            }
        }

        function renderPayments(payments) {
            const tbody = document.getElementById('payments-table');
            if (!tbody) return;

            if (!payments || payments.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="6" class="text-center py-4">
                            No payments found
                        </td>
                    </tr>`;
                return;
            }

            tbody.innerHTML = payments.map(payment => `
                <tr data-payment-id="${payment.id}">
                    <td>${payment.user_name || 'N/A'}</td>
                    <td>₦${parseFloat(payment.amount || 0).toLocaleString()}</td>
                    <td>${new Date(payment.created_at).toLocaleDateString()}</td>
                    <td>${payment.reference || 'N/A'}</td>
                    <td>
                        <span class="badge bg-${getStatusBadgeClass(payment.status)}">
                            ${formatStatus(payment.status)}
                        </span>
                    </td>
                    <td class="text-nowrap">
                        <button class="btn btn-sm btn-outline-primary view-payment" 
                                data-payment-id="${payment.id}">
                            <i class="fas fa-eye"></i> View
                        </button>
                        ${payment.status === 'pending' ? `
                            <button class="btn btn-sm btn-outline-success ms-1 approve-payment" 
                                    data-payment-id="${payment.id}">
                                <i class="fas fa-check"></i> Approve
                            </button>
                            <button class="btn btn-sm btn-outline-danger ms-1 reject-payment" 
                                    data-payment-id="${payment.id}">
                                <i class="fas fa-times"></i> Reject
                            </button>
                        ` : ''}
                    </td>
                </tr>
            `).join('');
        }

        function getStatusBadgeClass(status) {
            switch (status) {
                case 'completed': return 'success';
                case 'pending': return 'warning';
                case 'rejected': return 'danger';
                default: return 'secondary';
            }
        }

        function formatStatus(status) {
            return status.charAt(0).toUpperCase() + status.slice(1);
        }

        // Payment actions
        async function viewPayment(paymentId) {
            if (!paymentId) return;
            
            currentPaymentId = paymentId;
            const modal = document.getElementById('paymentModal');
            const modalBody = document.getElementById('paymentDetails');
            const approveBtn = document.getElementById('approveBtn');
            const rejectBtn = document.getElementById('rejectBtn');
            
            if (!modal || !modalBody) return;
            
            try {
                // Show loading state
                modalBody.innerHTML = `
                    <div class="text-center py-4">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>`;
                
                // Show modal
                paymentModal.show();
                
                // Fetch payment details
                const response = await fetch(`../../api/admin/get-payment.php?id=${paymentId}`, {
                    credentials: 'include'
                });
                
                if (!response.ok) throw new Error('Failed to load payment details');
                
                const data = await response.json();
                
                if (data.success && data.payment) {
                    const payment = data.payment;
                    
                    // Render payment details
                    modalBody.innerHTML = `
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <h6>Payment ID</h6>
                                <p>${payment.id || 'N/A'}</p>
                            </div>
                            <div class="col-md-6">
                                <h6>Reference</h6>
                                <p>${payment.reference || 'N/A'}</p>
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <h6>Amount</h6>
                                <p>₦${parseFloat(payment.amount || 0).toLocaleString()}</p>
                            </div>
                            <div class="col-md-6">
                                <h6>Status</h6>
                                <span class="badge bg-${getStatusBadgeClass(payment.status)}">
                                    ${formatStatus(payment.status)}
                                </span>
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <h6>Date</h6>
                                <p>${new Date(payment.created_at).toLocaleString()}</p>
                            </div>
                            <div class="col-md-6">
                                <h6>Payment Method</h6>
                                <p>${payment.method ? payment.method.charAt(0).toUpperCase() + payment.method.slice(1) : 'N/A'}</p>
                            </div>
                        </div>
                        ${payment.notes ? `
                            <div class="mb-3">
                                <h6>Notes</h6>
                                <p>${payment.notes}</p>
                            </div>
                        ` : ''}`;
                    
                    // Update action buttons based on status
                    if (approveBtn && rejectBtn) {
                        if (payment.status === 'pending') {
                            approveBtn.classList.remove('d-none');
                            rejectBtn.classList.remove('d-none');
                            
                            // Update button event listeners
                            approveBtn.onclick = () => updatePaymentStatus(paymentId, 'completed');
                            rejectBtn.onclick = () => updatePaymentStatus(paymentId, 'rejected');
                        } else {
                            approveBtn.classList.add('d-none');
                            rejectBtn.classList.add('d-none');
                        }
                    }
                } else {
                    throw new Error(data.message || 'Failed to load payment details');
                }
            } catch (error) {
                console.error('Error loading payment details:', error);
                modalBody.innerHTML = `
                    <div class="alert alert-danger">
                        <i class="fas fa-exclamation-circle me-2"></i>
                        ${error.message || 'Failed to load payment details'}
                    </div>`;
            }
        }

        async function updatePaymentStatus(paymentId, status) {
            if (!paymentId || !status) return;
            
            try {
                const response = await fetch('../../api/admin/update-payment-status.php', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    credentials: 'include',
                    body: JSON.stringify({
                        paymentId,
                        status
                    })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    // Show success message
                    if (window.notify) {
                        notify.success(`Payment ${status} successfully`);
                    }
                    
                    // Close modal if open
                    if (paymentModal) {
                        paymentModal.hide();
                    }
                    
                    // Reload payments
                    await loadPayments();
                } else {
                    throw new Error(data.message || 'Failed to update payment status');
                }
            } catch (error) {
                console.error('Error updating payment status:', error);
                if (window.notify) {
                    notify.error(error.message || 'Failed to update payment status');
                }
            }
        }

        // Export functionality
        async function exportPayments() {
            const format = document.getElementById('exportFormat')?.value || 'csv';
            const dateFrom = document.getElementById('exportDateFrom')?.value;
            const dateTo = document.getElementById('exportDateTo')?.value;
            
            try {
                // Build query parameters
                const params = new URLSearchParams();
                if (dateFrom) params.append('date_from', dateFrom);
                if (dateTo) params.append('date_to', dateTo);
                if (format) params.append('format', format);
                
                // Show loading state
                const confirmExportBtn = document.getElementById('confirmExport');
                const originalText = confirmExportBtn?.innerHTML;
                if (confirmExportBtn) {
                    confirmExportBtn.disabled = true;
                    confirmExportBtn.innerHTML = `
                        <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                        Exporting...
                    `;
                }
                
                // Make the export request
                const response = await fetch(`../../api/admin/export-payments.php?${params.toString()}`, {
                    credentials: 'include'
                });
                
                if (!response.ok) {
                    const error = await response.json().catch(() => ({}));
                    throw new Error(error.message || 'Failed to export payments');
                }
                
                // Get the filename from the Content-Disposition header
                const contentDisposition = response.headers.get('Content-Disposition');
                let filename = 'payments';
                
                if (contentDisposition) {
                    const filenameMatch = contentDisposition.match(/filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/);
                    if (filenameMatch && filenameMatch[1]) {
                        filename = filenameMatch[1].replace(/['"]/g, '');
                    }
                }
                
                // Create a download link
                const blob = await response.blob();
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = filename;
                document.body.appendChild(a);
                a.click();
                
                // Cleanup
                window.URL.revokeObjectURL(url);
                document.body.removeChild(a);
                
                // Close the modal
                if (exportModal) {
                    exportModal.hide();
                }
                
                // Show success message
                if (window.notify) {
                    notify.success('Export completed successfully');
                }
                
            } catch (error) {
                console.error('Export error:', error);
                if (window.notify) {
                    notify.error(error.message || 'Failed to export payments');
                }
            } finally {
                // Reset export button
                const confirmExportBtn = document.getElementById('confirmExport');
                if (confirmExportBtn) {
                    confirmExportBtn.disabled = false;
                    confirmExportBtn.innerHTML = `
                        <i class="fas fa-download me-1"></i> Export
                    `;
                }
            }
        }

        // Filter functionality
        function filterPayments() {
            const status = document.getElementById('statusFilter')?.value;
            const dateFrom = document.getElementById('dateFrom')?.value;
            const dateTo = document.getElementById('dateTo')?.value;
            
            // For now, just reload with query parameters
            // In a real app, you would implement client-side filtering
            // or make an API call with filters
            console.log('Applying filters:', { status, dateFrom, dateTo });
            loadPayments();
        }

        // Logout
        async function logout() {
            try {
                const response = await fetch('../../api/auth/logout.php', {
                    method: 'POST',
                    credentials: 'include'
                });
                
                window.location.href = '../auth/login.html';
            } catch (error) {
                console.error('Logout error:', error);
                window.location.href = '../auth/login.html';
            }
        }
    </script>
</body>
</html>
